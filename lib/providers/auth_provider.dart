import 'package:flutter/material.dart';
import 'dart:async';
import 'package:supabase_flutter/supabase_flutter.dart' hide User;
import '../models/user.dart';
import '../services/supabase_auth_service.dart';

class AuthProvider extends ChangeNotifier {
  User? _user;
  bool _isLoading = false;
  String? _error;
  StreamSubscription<AuthState>? _authSub;

  User? get user => _user;
  bool get isLoading => _isLoading;
  String? get error => _error;
  bool get isAuthenticated => _user != null;
  AuthProvider() {
    // L·∫Øng nghe thay ƒë·ªïi phi√™n ƒëƒÉng nh·∫≠p t·ª´ Supabase ƒë·ªÉ c·∫≠p nh·∫≠t UI ngay
    _authSub = Supabase.instance.client.auth.onAuthStateChange.listen((data) async {
      try {
        if (data.session?.user != null) {
          final u = await SupabaseAuthService.getCurrentUser();
          setUser(u);
        } else {
          setUser(null);
        }
      } catch (_) {}
    });
  }

  @override
  void dispose() {
    _authSub?.cancel();
    super.dispose();
  }

  void setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void setError(String? error) {
    _error = error;
    notifyListeners();
  }

  void setUser(User? user) {
    _user = user;
    notifyListeners();
  }

  Future<bool> login(String email, String password) async {
    setLoading(true);
    setError(null);

    try {
      final user = await SupabaseAuthService.loginWithEmail(email, password);
      if (user != null) {
        setUser(user);
        return true;
      } else {
        setError('ƒêƒÉng nh·∫≠p th·∫•t b·∫°i');
        return false;
      }
    } catch (e) {
      setError('L·ªói ƒëƒÉng nh·∫≠p: $e');
      return false;
    } finally {
      setLoading(false);
    }
  }

  Future<bool> register(String email, String password, String fullName, String phone) async {
    setLoading(true);
    setError(null);

    try {
      final user = await SupabaseAuthService.register(email, password, fullName, phone);
      if (user != null) {
        setUser(user);
        return true;
      } else {
        setError('ƒêƒÉng k√Ω th·∫•t b·∫°i');
        return false;
      }
    } catch (e) {
      setError('L·ªói ƒëƒÉng k√Ω: $e');
      return false;
    } finally {
      setLoading(false);
    }
  }

  Future<bool> loginWithGoogle() async {
    setLoading(true);
    setError(null);

    try {
      final user = await SupabaseAuthService.loginWithGoogle();
      if (user != null) {
        setUser(user);
        return true;
      } else {
        setError('ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i');
        return false;
      }
    } catch (e) {
      setError('L·ªói ƒëƒÉng nh·∫≠p Google: $e');
      return false;
    } finally {
      setLoading(false);
    }
  }

  Future<bool> loginWithApple() async {
    setLoading(true);
    setError(null);

    try {
      final user = await SupabaseAuthService.loginWithApple();
      if (user != null) {
        setUser(user);
        return true;
      } else {
        setError('ƒêƒÉng nh·∫≠p Apple th·∫•t b·∫°i');
        return false;
      }
    } catch (e) {
      setError('L·ªói ƒëƒÉng nh·∫≠p Apple: $e');
      return false;
    } finally {
      setLoading(false);
    }
  }

  Future<bool> sendOTP(String email) async {
    setLoading(true);
    setError(null);

    try {
      final success = await SupabaseAuthService.sendOTP(email);
      if (success) {
        return true;
      } else {
        setError('G·ª≠i OTP th·∫•t b·∫°i');
        return false;
      }
    } catch (e) {
      setError('L·ªói g·ª≠i OTP: $e');
      return false;
    } finally {
      setLoading(false);
    }
  }

  Future<bool> verifyOTP(String email, String otp) async {
    setLoading(true);
    setError(null);

    try {
      final success = await SupabaseAuthService.verifyOTP(email, otp);
      if (success) {
        return true;
      } else {
        setError('X√°c th·ª±c OTP th·∫•t b·∫°i');
        return false;
      }
    } catch (e) {
      setError('L·ªói x√°c th·ª±c OTP: $e');
      return false;
    } finally {
      setLoading(false);
    }
  }

  Future<bool> forgotPassword(String email) async {
    setLoading(true);
    setError(null);

    try {
      final success = await SupabaseAuthService.forgotPassword(email);
      if (success) {
        return true;
      } else {
        setError('G·ª≠i email kh√¥i ph·ª•c th·∫•t b·∫°i');
        return false;
      }
    } catch (e) {
      setError('L·ªói kh√¥i ph·ª•c m·∫≠t kh·∫©u: $e');
      return false;
    } finally {
      setLoading(false);
    }
  }

  Future<bool> changePassword(String oldPassword, String newPassword) async {
    setLoading(true);
    setError(null);

    try {
      final success = await SupabaseAuthService.changePassword(newPassword);
      if (success) {
        return true;
      } else {
        setError('ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i');
        return false;
      }
    } catch (e) {
      setError('L·ªói ƒë·ªïi m·∫≠t kh·∫©u: $e');
      return false;
    } finally {
      setLoading(false);
    }
  }

  Future<void> logout() async {
    setLoading(true);
    setError(null);

    try {
      await SupabaseAuthService.logout();
      setUser(null);
      // Reset state kh√°c n·∫øu c·∫ßn (gi·ªè h√†ng, th√¥ng b√°o...)
    } catch (e) {
      setError('L·ªói ƒëƒÉng xu·∫•t: $e');
    } finally {
      setLoading(false);
    }
  }

  void clearError() {
    setError(null);
  }

  // Ki·ªÉm tra user hi·ªán t·∫°i khi app kh·ªüi ƒë·ªông
  Future<void> checkCurrentUser() async {
    setLoading(true);
    try {
      print('üîç AuthProvider: Checking current user...');
      final user = await SupabaseAuthService.getCurrentUser();
      print('üîç AuthProvider: User found: ${user?.tenNguoiDung}');
      setUser(user);
    } catch (e) {
      print('Error checking current user: $e');
      setUser(null);
    } finally {
      setLoading(false);
    }
  }
}
